#include <iostream>
#include<list>
#include<unordered_map>
using namespace std;
template<typename T>;
class Graph
{  unordered_map<T,list <pair<T,int> > > adjList;
public:
Graph(){

}
void addEdge(T u,T v,int weight,bool bidir = true){
    adjList[u].push_back(make_pair(v,weight));

    if(bidir)
    {
        adjList[v].push_back(make_pair(u),weight);
    }
}

void printGraph(){
    for (auto it:adjList)
    {
        string vertex = it.first;
        cout<< vertex<<"==";
        for(auto neighbour: it.second){
            cout<<neighbour_First<<" -- "<<neighbour_second<<endl;
        }
        cout<<endl;
    }
}


};
int main() {
Graph <string> g;
g.addEdge("1","4",50,false);
g.addEdge("1","3",30,false);
g.addEdge("1","2",10,false);
g.addEdge("2","1",10,false);
g.addEdge("2","5",40,false);
g.addEdge("5","3",10,false);
g.addEdge("4","5",20false);
g.printGraph();
return 0;
}
